/** my eqn. proofs to get center of circle (x,y)
x*x -2*x*x1 + x1*x1 + y*y - 2*y*y1 + y1*y1 = r*r
x*x -2*x*x2 + x2*x2 + y*y - 2*y*y2 + y2*y2 = r*r
2*x*(-x1 + x2 ) =  2*y(y1 - y2) - y1*y1 + y2*y2 - x1*x1 + x2*x2
A=2*( -x1 + x2 )
B=2*( y1 - y2)
C=- y1*y1 + y2*y2 - x1*x1 + x2*x2
x = ( y*B + C)/ A
2*x*(-x1 + x3 ) =  2*y(y1 - y3) - y1*y1 + y3*y3 - x1*x1 + x3*x3
D=2*(-x1 + x3 )
E=(- y1*y1 + y3*y3 - x1*x1 + x3*x3)
F=2*(y1 - y3)
( ( y*B + C)/ A )*D = y*F + E
y*B*D/A + C*D/A = y*F + E
y*(B*D/A  - F) =  + E -( C*D/A )

Result

A=2*( -x1 + x2 )
B=2*( y1 - y2)
C=- y1*y1 + y2*y2 - x1*x1 + x2*x2
D=2*(-x1 + x3 )
E=(- y1*y1 + y3*y3 - x1*x1 + x3*x3)
F=2*(y1 - y3)
S=(B*D/A  - F)
SS=E -( C*D/A )
y=SS/S
x = ( y*B + C)/ A

**/

#include <bits/stdc++.h>
#include <fstream>
#include <cfloat>


typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

using namespace std;

double Fib(double x,double z);
string BinDec(ull x);
string StringInt(ll x);
ull StringInt(string x);
ull BinDec (string x);
ull POWMOD (ull x,ull y,ull mod);
ull POWE(long long , long long);

ll fast_pow(ll a,ll b,ll mod)
{
	if(b==0)
		return 1ll;
	ll ans=1;
	if(b%2)
		return ans=(fast_pow(a,b-1,mod)*a)%mod;
	ans=(fast_pow(a,b/2,mod)%mod);
	return ((ans*ans)%mod);
}


int main()
{
   // freopen("tshirts.in","r",stdin);
    //freopen("game.out","w",stdout);
    ios::sync_with_stdio(false);
    cin.tie(0);

    long double x[5],y[5]={},A,B,C,D,E,F,S,SS,a,b,c,R[200],PI=3.141592653589793,up,down,angle,xx,cx,cy;
    int n;
    cin>>n;
    for(int j=0;j<n;j++)
    {

        for(int i=0;i<3;i++)
             cin>>x[i]>>y[i];
        A=sqrt( ((x[0]-x[1])*(x[0]-x[1]))+((y[0]-y[1])*(y[0]-y[1])));
        B=sqrt( ((x[0]-x[2])*(x[0]-x[2]))+((y[0]-y[2])*(y[0]-y[2])));
        C=sqrt( ((x[2]-x[1])*(x[2]-x[1]))+((y[2]-y[1])*(y[2]-y[1])));
        a=A*A;
        b=B*B;
        c=C*C;
        up=a+c-b;
        down=2*A*C;
        xx=up/down;
        angle=acos(xx);

        R[j]=B/(sin(angle));

        A=2*(x[1]-x[0]);
        B=2*(y[0]-y[1]);
        C=(-(y[0]*y[0])+(y[1]*y[1])-(x[0]*x[0])+(x[1]*x[1]));
        D=2*(x[2]-x[0]);
        E=(-(y[0]*y[0])+(y[2]*y[2])-(x[0]*x[0])+(x[2]*x[2]));
        F=2*(y[0]-y[2]);
        S=( ((B*D)/A) -F);
        SS=E -( (C*D)/A );
        cy=SS/S;
        cx = ( (cy*B) + C)/ A;
        cout<<cx<<' '<<cy<<'\n';

    }



    return 0;
}
